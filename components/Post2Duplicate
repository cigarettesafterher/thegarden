import {
    collection,
    deleteDoc,
    doc,
    onSnapshot,
    orderBy,
    query,
    setDoc,
  } from "@firebase/firestore";
  import {
    ChartBarIcon,
    ChatIcon,
    DotsHorizontalIcon,
    HeartIcon,
    ShareIcon,
    SwitchHorizontalIcon,
    TrashIcon,
  } from "@heroicons/react/outline";
  import {
    HeartIcon as HeartIconFilled,
    ChatIcon as ChatIconFilled,
  } from "@heroicons/react/solid";
  import { useSession } from "next-auth/react";
  import { useRouter } from "next/router";
  import { useEffect, useState } from "react";
  import Moment from "react-moment";
  import { useRecoilState } from "recoil";
  import { modalState2, postIdState2 } from "../atoms/modalAtom2";
  import { db } from "../firebase";
  
  function Post2({ id, post, postPage }) {
    const { data: session } = useSession();
    const [isOpen, setIsOpen] = useRecoilState(modalState2);
    const [postId, setPostId] = useRecoilState(postIdState2);
    const [comments, setComments] = useState([]);
    const [likes, setLikes] = useState([]);
    const [liked, setLiked] = useState(false);
    const router = useRouter();
  
    useEffect(
      () =>
        onSnapshot(
          query(
            collection(db, "posts", id, "comments"),
            orderBy("timestamp", "desc")
          ),
          (snapshot) => setComments(snapshot.docs)
        ),
      [db, id]
    );
  
    useEffect(
      () =>
        onSnapshot(collection(db, "posts", id, "likes"), (snapshot) =>
          setLikes(snapshot.docs)
        ),
      [db, id]
    );
  
    useEffect(
      () =>
        setLiked(
          likes.findIndex((like) => like.id === session?.user?.uid) !== -1
        ),
      [likes]
    );
  
    const likePost = async () => {
      if (liked) {
        await deleteDoc(doc(db, "posts", id, "likes", session.user.uid));
      } else {
        await setDoc(doc(db, "posts", id, "likes", session.user.uid), {
          username: session.user.name,
        });
      }
    };
  
    return (
      <div
      className="p-3 flex cursor-pointer border-b border-gray-700"
     
      >
        {!postPage && (
          <img
            src={post?.userImg}
            alt=""
            className="h-11 w-11 rounded-full mr-4"
          />
        )}
        <div className="flex flex-col space-y-2 w-full">
          <div className={`flex ${!postPage && "justify-between"}`}>
            {postPage && (
              <img
                src={post?.userImg}
                alt="Profile Pic"
                className="h-11 w-11 rounded-full mr-4"
              />
            )}
            <div className="text-[#525252]">
              <div className="grid-block group">
                <h4
                  className={`font-bold text-[15px] sm:text-base text-[#626262] group-hover:underline ${
                    !postPage && "grid-block"
                  }`}
                >
                  {post?.username}
                </h4>
               
              </div>
              Â·{" "}
              
              {!postPage && (
                <p className="text-[#494949] text-[15px] sm:text-base mt-0.5">
                  {post?.text}
                </p>
              )}
            </div>
           
          </div>
          {postPage && (
            <p className="text-[#363636] mt-0.5 text-xl">{post?.text}</p>
          )}
          <img
            src={post?.image}
            alt=""
            className="rounded-2xl max-h-[700px] object-cover mr-2"
          />
          <div
            className={`text-[#5e5e5e] flex justify-between w-10/12 ${
              postPage && "mx-auto"
            }`}
          >
               <div
            className="flex items-center space-x-1 group"
            onClick={(e) => {
              e.stopPropagation();
              setPostId(id);
              setIsOpen(true);
            }}
          >
            <div className="icon group-hover:bg-[#1df03d] group-hover:bg-opacity-10">
              <ChatIcon className="h-5 group-hover:text-[#1df052]" />
            </div>
            {comments.length > 0 && (
              <span className="group-hover:text-[#1df028] text-sm">
                {comments.length}
              </span>
            )}
          </div>

          {session.user.uid === post?.id ? (
            <div
              className="flex items-center space-x-1 group"
              onClick={(e) => {
                e.stopPropagation();
                deleteDoc(doc(db, "gallery","posts", id));
                router.push("/index2");
              }}
          
              >
              <div className="icon group-hover:bg-red-600/10">
                <TrashIcon className="h-5 group-hover:text-red-600" />
              </div>
            </div>
          ) : (
            <div className="flex items-center space-x-1 group">
              <div className="icon group-hover:bg-green-500/10">
                <SwitchHorizontalIcon className="h-5 group-hover:text-green-500" />
              </div>
            </div>
          )}
 <div
            className="flex items-center space-x-1 group"
            onClick={(e) => {
              e.stopPropagation();
              likePost();
            }}
            >
            <div className="icon group-hover:bg-pink-600/10">
              {liked ? (
                <HeartIconFilled className="h-5 text-pink-600" />
              ) : (
                <HeartIcon className="h-5 group-hover:text-pink-600" />
              )}
            </div>
            {likes.length > 0 && (
              <span
                className={`group-hover:text-pink-600 text-sm ${
                  liked && "text-pink-600"
                }`}
              >
                {likes.length}
              </span>
            )}
          </div>

          <div className="icon group">
            <ShareIcon className="h-5 group-hover:text-[#1df02b]" />
          </div>
          <div className="icon group">
            <ChartBarIcon className="h-5 group-hover:text-[#1df028]" />
          </div>
        </div>
      </div>
    </div>
  );
}

  
  export default Post2;
  